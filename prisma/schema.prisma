// reference for how to setup for NextAuth: https://authjs.dev/reference/adapter/prisma
// Mongodb prisma many-to-many setup and how to query: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#mongodb

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Account document is created automatically by nextAuth when a user signs in
// via OAuth - and is populated by the data returned by the OAuth provider.
model Account {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String   @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.String
  access_token             String?  @db.String
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.String
  session_state            String?
  createdAt                DateTime @default(now())

  // Connects our Account to our User. And if the user is deleted, so will the account
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Makes sure we only have one Account associated to this provider and it's ID
  @@unique([provider, providerAccountId])
}

// Every user generated WatchParty will be it's own document, with a connection to the user that created it.
model WatchParty {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  user               User     @relation("myWatchParties", fields: [userId], references: [id], onDelete: Cascade)
  partygoerIds       String[] @db.ObjectId
  partygoers         User[]   @relation("goingToWatchParties", fields: [partygoerIds], references: [id])
  interestedUsersIds String[] @db.ObjectId
  interestedUsers    User[]   @relation("interestedInWatchParties", fields: [interestedUsersIds], references: [id])
  mediaId            String
  mediaType          String
  mediaTitle         String
  title              String
  description        String
  // date will also contain the time of the watchparty
  date               DateTime
  season             Int?
  episode            Int?
  address            String
  city               String
  state              String
  zip                String
  geo                GeoJSON
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

type GeoJSON {
  type        String    @default("Point")
  coordinates Decimal[]
}

type MyListItem {
  id         String
  media_type String
}

type UserLocation {
  city        String?
  coordinates Decimal[]
}

model User {
  id                          String        @id @default(auto()) @map("_id") @db.ObjectId
  name                        String?
  email                       String?       @unique
  emailVerified               DateTime?
  password                    String?
  image                       String?
  location                    UserLocation?
  radius                      Int           @default(50)
  accounts                    Account[]
  myWatchParties              WatchParty[]  @relation("myWatchParties")
  goingToWatchPartiesIds      String[]      @db.ObjectId
  goingToWatchParties         WatchParty[]  @relation("goingToWatchParties", fields: [goingToWatchPartiesIds], references: [id])
  interestedInWatchPartiesIds String[]      @db.ObjectId
  interestedInWatchParties    WatchParty[]  @relation("interestedInWatchParties", fields: [interestedInWatchPartiesIds], references: [id])
  myList                      MyListItem[]
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}
